// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //寄存器A，根据当前指令为A还是C指令，寄存器A加载最新的地址，或者保持之前的输出，或者存储
    Mux16(a=instruction, b=outAluforA, sel=instruction[15], out=inforA);
    Not(in=instruction[5], out=notins10);
    And(a=instruction[15], b=notins10, out=CtrlnotA);
    Not(in=CtrlnotA, out=CtrlA);
    ARegister(in=inforA, load=CtrlA, out[0..14]=addressM, out=outAforALU, out=outAforPC);

    //寄存器D，根据C指令，确定其输入来自输入还是ALU计算
    And(a=instruction[4], b=instruction[15], out=ctrlD);
    DRegister(in=outAluforD, load=ctrlD, out=outD);

    //确定ALU的其中一个输入来自A寄存器还是内存输入
    Mux16(a=outAforALU, b=inM, sel=instruction[12], out=Aorin);
    
    //ALU，核心计算部分
    //一个输入是D寄存器的输出，一个输入是地址寄存器的输入或内存的输入
    //一个输出用于D寄存器是否存储，一个输出用于A寄存器是否存储，一个输出用于是否存到内存里
    //还有一个关于ALU的输出是否等于0，一个输出指示ALU的输出是否小于0
    ALU(x=outD, y=Aorin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outAluforD, out=outAluforA, out=outM, zr=outzr, ng=outng);

    //PC，程序计数器
    //判断是否ALU的输出是否小于0
    And(a=outng, b=instruction[2], out=ngforPC);
    //判断是否ALU的输出是否等于0
    And(a=outzr, b=instruction[1], out=zrforPC);
    //判断是否ALU的输出是否大于0
    Xor(a=outzr, b=outng, out=xorforPC);
    Not(in=xorforPC, out=notxorforPC);
    And(a=notxorforPC, b=instruction[0], out=poforPC);
    //确定如果是C指令是否需要跳转
    Or(a=ngforPC, b=zrforPC, out=or1);
    Or(a=or1, b=poforPC, out=ctrlPC1);
    //依据是否是C指令，决定是否使能jmp功能
    And(a=instruction[15], b=ctrlPC1, out=ctrlPC);
    PC(in=outAforPC, load=ctrlPC, inc=true, reset=reset, out[0..14]=pc);

    //对内存的控制
    And(a=instruction[3], b=instruction[15], out=writeM);
}